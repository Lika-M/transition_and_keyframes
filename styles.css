* {
    box-sizing: border-box;
}

body {
    padding: 100px;
    display: flex;
    gap: 3%;
}

.trigger {
    width: 200px;
    height: 200px;
    border: 15px solid #ddd;
    background-color: pink;
}

/*                      --- TRANSITION PROPERTY ---
---> triggering:
1. hover pseudo class
2. class changes with js
--->

.element {
    [name] [duration] [timing-function] [delay] 
}            
*/

.box {
    width: 100%;
    height: 100%;
    display: inline-block;
    background-color: palevioletred;
    font-size: 23px;
    text-align: center;
    padding: 50px;
    transition: transform 1s cubic-bezier(.65, .05, .36, 1), border-radius 0.5s ease-in 1s;
    /* do not trigger the child element, only parent */
    pointer-events: none;
}

.trigger:hover .box {
    /* the property that will changes */
    transform: translate(200px, 200px) rotate(45deg);
    border-radius: 50%;
}

/* In case of adding class "clicked" with javascript *
.trigger.clicked .box {
    transform: translate(200px, 200px) rotate(45deg);
    border-radius: 50%;
}
*/
/*                      --- ANIMATION WITH KEYFRAMES ---

---> triggering:
1. hover pseudo class
2. class changes ---> with js
3. appending child element  ---> with js
--->

.element {
    [name] [duration] [timing-function] [delay] [iteration-count] [direction] [fill-mode] [play-state]
    myKeyframe 1s ease 0.5 infinity normal forwards paused
}

*/


.box-2 {
    width: 200px;
    height: 200px;
    display: inline-block;
    background-color: rgb(135, 112, 216);
    font-size: 23px;
    text-align: center;
    padding: 50px;
    border: 15px solid #ddd;
    /* animation: grow 2s ease 1s infinite; */
    animation: change-props 2s ease 1s 3;
}

.box-3 {
    width: 200px;
    height: 200px;
    display: inline-block;
    background-color: rgb(75, 226, 253);
    font-size: 23px;
    text-align: center;
    padding: 50px;
    border: 15px solid #ddd;

    /* --animation properties--- */
    animation-name: grow;
    animation-duration: 1s;
    animation-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);
    animation-delay: 2s;
    animation-iteration-count: 5;
    /* normal reverse alternate */
    animation-direction: reverse;
    /* normal forwards backwards none --> sets how a CSS animation applies styles to its target before and after its execution. */
    animation-fill-mode: forwards;
    /* running or paused */
    animation-play-state: running;
}


@keyframes grow {

    /* from => 0% */
    from {
        height: 200px;
    }

    /* from => 100% */
    to {
        height: 400px;
        background-color: rgb(66, 4, 160);
    }
}

@keyframes change-props {
    0% {
        width: 200px;
        background-color: gray;
    }

    25%,
    100% {
        height: 400px;
        background-color: lightgreen;
    }

    50% {
        width: 400px;
        background-color: orange;
        border-radius: 50%;
    }
}

.wrapper {
    width: 200px;
    height: 200px;
    display: inline-block;
    text-align: center;
    padding: 50px;
    font-size: 23px;
}

.box-4 {
    width: 200px;
    height: 200px;
    display: inline-block;
    text-align: center;
    padding: 50px;
    border: 15px solid #ddd;
    font-size: 23px;
    background-color: rgb(75, 253, 87);

    
    animation-name: appear;
    animation-duration: 500ms;
    animation-timing-function: ease-in-out;
    animation-delay: 0s;
    animation-iteration-count: 1;
    animation-direction: normal;
    animation-fill-mode: forwards;
    /* animation-play-state: running; */
}

@keyframes appear {
    0% {
        opacity: 0;
        transform: scale(0);
    }

    100% {
        opacity: 1;
        transform: scale(1);
    }
}